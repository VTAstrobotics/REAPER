name: CI

on:
  pull_request:
    branches: "main"

jobs:
  build-dev-container:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Extract sanitized branch name
      run: |
        echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / _)" >> $GITHUB_ENV
        echo "DOCKER_TAG=vtastrobotics/astro-dev:$(echo ${ env.BRANCH_NAME })" >> $GITHUB_ENV
      # echo "${{DOCKER_TAG}}"

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Pull dev container image
      run: |
        docker pull vtastrobotics/astro-dev:${{ env.BRANCH_NAME }} || \
        docker pull vtastrobotics/astro-dev:main || \
        echo "Building the developer container from scratch"

    - name: Copy Dockerfile
      run: |
        mkdir -p .github/workflows/ci/
        cp .devcontainer/Dockerfile .github/workflows/ci/
        cp -r * .github/workflows/ci/

    - name: Modify Dockerfile for clang testing
      run: |
        echo "RUN sudo apt update && sudo apt install -y jq xz-utils" >> ./.github/workflows/ci/Dockerfile
        echo "COPY ./.github/workflows/entrypoint.sh /" >> ./.github/workflows/ci/Dockerfile
        echo "RUN sudo chmod +x /entrypoint.sh" >> ./.github/workflows/ci/Dockerfile
        echo "COPY ./.github/actions/cppformat/ /" >> ./.github/workflows/ci/Dockerfile

    - name: Print the container image
      run: cat ./.github/workflows/ci/Dockerfile

    - name: Build the developer container image
      run: docker build --file ./.github/workflows/ci/Dockerfile --tag vtastrobotics/astro-dev:${{ env.BRANCH_NAME }} .

    - name: Push to DockerHub
      run: docker push vtastrobotics/astro-dev:${{ env.BRANCH_NAME }}

    - name: Run developer container
      run: |
        docker run --rm vtastrobotics/astro-dev:${{ env.BRANCH_NAME }} -c "source /build_scripts/build.sh"

  # apply-cpp-formatting:
  #   name: clang-format Code Formatter
  #   runs-on: ubuntu-latest
  #   needs: build-dev-container
  #   steps:
  #     - name: Check out repository
  #       uses: actions/checkout@v3

  #     # - name: Log in to DockerHub
  #     #   uses: docker/login-action@v2
  #     #   with:
  #     #     username: ${{ secrets.DOCKER_USERNAME }}
  #     #     password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Print test
  #       run: echo ${{ env.BRANCH_NAME }}

  #     - name: Pull dev container image
  #       run: docker pull vtastrobotics/astro-dev:${{ env.BRANCH_NAME }}

  #       run: sudo docker run --rm vtastrobotics/astro-dev:${{ env.BRANCH_NAME }} bash -c "ls -al / && sudo chmod u+x /entrypoint.sh && source /entrypoint.sh"
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Clang Code Formatter
  #       run: source ./.github/workflows/entrypoint.sh
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # build-src-code:
  #   name: Build Source Code
  #   runs-on: ubuntu-latest
  #   needs: build-dev-container
  #   steps:
  #     - name: Check out repository
  #       uses: actions/checkout@v3

  #     # - name: Get developer container image
  #     #   uses: actions/download-artifact@v4
  #     #   with:
  #     #     name: astro-dev

  #     # - name: Load developer container
  #     #   run: docker load -i astro-dev.tar

  #     # - name: HELP
  #     #   run: |
  #     #     ls -a /
  #     #     docker image ls

  #     - name: Run developer container
  #       run: |
  #         docker build --file ./.github/actions/cppformat/Dockerfile --tag astro-dev .
  #         docker run --rm astro-dev bash -c "source /build_scripts/build.sh"
  #       # astro-dev bash -c "source /build_scripts/build.sh"

  #     # - name: Clang Code Formatter
  #     #   run: source ./.github/workflows/entrypoint.sh
  #     #   env:
  #     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
