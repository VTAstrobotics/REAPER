name: CI

on:
  pull_request:
    branches: "main"

env:
  DEV_CONTAINER_NAME: astro-dev

jobs:
  build-dev-container:
    runs-on: ubuntu-latest
    outputs:
      CUR_DOCKER_TAG: ${{ steps.output-docker-tag.outputs.CUR_DOCKER_TAG }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Extract sanitized branch name
      run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / _)" >> $GITHUB_ENV

    - name: Docker tag
      run: echo "CUR_DOCKER_TAG=${{ secrets.DOCKER_USERNAME }}/${{ env.DEV_CONTAINER_NAME }}:$BRANCH_NAME" >> $GITHUB_ENV

    - name: Output docker tag
      id: output-docker-tag
      run: echo "::set-output name=CUR_DOCKER_TAG::${{ env.CUR_DOCKER_TAG }}"

    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Pull dev container image
      run:
        (echo "CACHE_DOCKER_TAG=${{ secrets.DOCKER_USERNAME }}/${{ env.DEV_CONTAINER_NAME }}:${{ env.BRANCH_NAME }}" >> $GITHUB_ENV &&
        docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.DEV_CONTAINER_NAME }}:${{ env.BRANCH_NAME }}) ||
        (echo "CACHE_DOCKER_TAG=${{ secrets.DOCKER_USERNAME }}/${{ env.DEV_CONTAINER_NAME }}:main" >> $GITHUB_ENV ;
        docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.DEV_CONTAINER_NAME }}:main) ||
        (echo "CACHE_DOCKER_TAG=none" >> $GITHUB_ENV ;
        echo "Building the developer container from scratch")

    - name: Copy Dockerfile
      run: |
        echo ${{ env.CACHE_DOCKER_TAG }}
        mkdir -p .github/workflows/ci/
        cp .devcontainer/Dockerfile .github/workflows/ci/
        cp -r * .github/workflows/ci/

    - name: Modify Dockerfile for the other jobs
      run: |
        echo "RUN sudo apt update && sudo apt install -y jq xz-utils" >> .github/workflows/ci/Dockerfile
        echo "COPY .github/workflows/entrypoint.sh /home/astro-dev/" >> .github/workflows/ci/Dockerfile
        echo "RUN ls /home/astro-dev/" >> .github/workflows/ci/Dockerfile
        echo "RUN sudo chmod +x /home/astro-dev/entrypoint.sh" >> .github/workflows/ci/Dockerfile
        echo "COPY .github/workflows/ci/ /home/astro-dev/" >> .github/workflows/ci/Dockerfile

    - name: Build the developer container image
      run: docker build
        --file .github/workflows/ci/Dockerfile
        --tag ${{ env.CUR_DOCKER_TAG }}
        --cache-to type=inline
        --cache-from=${{ env.CACHE_DOCKER_TAG }}
        .
    - name: Push to DockerHub
      run: docker push ${{ env.CUR_DOCKER_TAG }}

    - name: Run developer container
      run: docker run --rm ${{ env.CUR_DOCKER_TAG }} bash -c "echo testing that it can run"

  # apply-cpp-formatting:
  #   name: Code Formatter
  #   runs-on: ubuntu-latest
  #   needs: build-dev-container
  #   steps:
  #     - name: Check out repository
  #       uses: actions/checkout@v3

  #     - name: Log in to DockerHub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Pull dev container image
  #       run: docker pull ${{ env.CUR_DOCKER_TAG }}

  #       run: docker run --rm ${{ env.CUR_DOCKER_TAG }} bash -c "cd && chmod u+x entrypoint.sh && source entrypoint.sh"
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     # - name: Clang Code Formatter
  #     #   run: source .github/workflows/entrypoint.sh
  #     #   env:
  #     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-src-code:
    name: Build Source Code
    runs-on: ubuntu-latest
    needs: build-dev-container
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Run developer container
        run: |
          docker run --rm ${{ needs.build-dev-container.outputs.CUR_DOCKER_TAG }} bash -c "cd && source build_scripts/build.sh"
